# **Interesting Chess** – Product Requirements Document

## **1\. Overview and Purpose**

**Interesting Chess** is a single-purpose web application that highlights statistically anomalous winning streaks by titled chess players. In chess parlance, calling a performance “_interesting_” can be a euphemism hinting at potential (unconfirmed) cheating. This site will automatically fetch all games played in the last 30 days by titled players (Grandmasters, International Masters, etc.) from the Chess.com public data API, analyze their win streaks, and flag streaks that are **extremely improbable** based on rating expectations. By showcasing these unlikely streaks, the site provides insight into unusual performances in a given month, offering the chess community a tool to spot outliers in results. The site will be updated daily with new data, remain lightweight (possibly a static site), and require minimal maintenance. It will be free to use and monetized via online advertisements.

**Key goals include:**  
\- Identifying **“interesting” win streaks** – sequences of consecutive wins with a combined probability below certain thresholds (5%, 1%, 0.1%, 0.01%). Even a single-game “streak” can qualify if the upset is large enough (e.g. a much lower-rated player beating a Grandmaster).  
\- Presenting these streaks in an easy-to-browse format (tables and charts) for quick scanning by users, sorted by the player’s rating to highlight notable players first.  
\- Emulating the **visual style of Chess.com** to create a familiar and credible user experience. Chess.com provides player data and profile images which will be leveraged to enrich the UI.  
\- Ensuring the solution is **infrastructure-light**: ideally a static site that can scale effortlessly for traffic (using CDN caching) and remains cheap or free to host (using AWS services). Daily data updates will be automated via Python scripts, minimizing manual intervention by the maintainer.

## **2\. User Stories and Use Cases**

- **Chess Enthusiast / Coach:** _“I want to see if any titled players had suspiciously strong performances recently.”_ – They visit **Interesting Chess** to find if any player’s recent results stand out as statistically unlikely, which might warrant further review or just be an interesting trivia.
- **Fair-Play Team Member:** _“I need a quick way to spot potential cheating cases among many games.”_ – They use the site as a triage tool, scanning the list of flagged streaks (e.g., a relatively unknown player suddenly winning many games against higher-rated opponents with very low expected probability).
- **Titled Player / Streamer:** _“Am I (or is a peer) on any ‘interesting streak’ list this month?”_ – They might check the site to see if their name appears, out of curiosity or concern, and view details of their streak.
- **Data-driven Fan:** _“I enjoy chess stats and want to see remarkable feats or upsets.”_ – They explore the charts and graphs on the site for fun insights, like the biggest upset of the month or the distribution of streak lengths.

These users value **quick access to clear information** – the site should immediately show who had an unusual streak, how unlikely it was, and provide context (ratings, game details). The tone will be careful: streaks are labeled "interesting" (not outright accusing cheating), leaving interpretation to the user.

## **3\. Scope and Definitions**

**In-Scope:**  
\- **Titled Players**: The analysis covers all players with official titles (GM, IM, FM, NM, WGM, etc.) as provided by Chess.com’s titled players list. This serves as the population for analysis[\[1\]](https://www.chess.com/news/view/published-data-api#:~:text=). (The Chess.com API offers endpoints for each title, e.g., all GMs, all IMs, etc., which will be used to gather the full set of usernames.)  
\- **Game Data (Last 30 Days)**: All games played by those titled players in the last 30 days are fetched via Chess.com’s public archives API. This includes games of all time controls (bullet, blitz, rapid, daily) and variants (standard chess; variants like Chess960 are likely excluded or handled separately if needed). Only completed games are considered.  
\- **Win Streak Detection**: A **streak** is defined as consecutive wins by the same player. The streak ends when the player has a non-win (a draw or loss) or when there are no more games. Streaks can span across different opponents and even different sessions or days; they are identified purely by consecutive wins in chronological order of games. Even a 1-game “streak” counts if it’s an upset win significant enough to meet the probability threshold.  
\- **Probability Calculation**: For each game in a streak, the probability that the player (given their rating) would win that game is estimated from the rating difference between the two players. We will use the Glicko rating system’s expected score formula (which is similar to the Elo formula) to calculate win probability, incorporating players’ ratings and rating deviation (RD) when available[\[2\]](https://en.wikipedia.org/wiki/Glicko_rating_system#:~:text=Image%3A%20,2). In practice, Chess.com provides each player’s current rating _after_ a game in the game data, and each player’s rating deviation (RD) in their stats[\[3\]](https://www.chess.com/news/view/published-data-api#:~:text=,win%20game). Using these, we approximate the win probability:

\> \*For example\*, if Player A (rating 2000, low RD) faces Player B (rating 2200, low RD), Player A’s expected win probability might be around ~24%. If Player A wins, that result had a 24% chance. If Player A strings together multiple such wins, the probability of all occurring in sequence is the \*\*product\*\* of each individual win probability. The smaller that product, the more “interesting” the streak. Using the Glicko expected score function $E_A = \\frac{1}{1 + \\exp\\{-g(\\phi_B)\\,(R_A - R_B)\\}}$【9†L296-L300】 (where $g(\\phi_B)$ adjusts for opponent’s RD), we get a precise win probability for each game. For simplicity and transparency, we may reduce this to the classic Elo formula for display (since RD differences often have only minor effect on expected scores【10†L67-L75】【10†L95-L103】).

- **“Interesting” Thresholds**: We define four tiers of statistical unlikelihood for streaks: **≤5%**, **≤1%**, **≤0.1%**, and **≤0.01%** chance. If a streak’s combined win probability falls at or below one of these thresholds, it is flagged as an “interesting streak” at that level. For instance, a streak with a 0.5% chance would fall under the 1% tier (being more unlikely than 1% but not as extreme as 0.1%), while a streak with 0.008% chance is in the 0.01% tier (extremely rare). These thresholds will be used to annotate the streaks (e.g., with colored labels or icons) so users can quickly gauge the rarity.
- **Monetization**: The site will display advertising (e.g., Google AdSense banners) in a non-intrusive way. Since the site is free to use and a niche tool, ad revenue will support hosting costs. Ads will be placed in standard locations (such as a banner at the top or bottom of pages, or a sidebar on desktop layouts) without overwhelming the core content.

**Out of Scope (for initial release):**  
\- Non-titled players: We will not analyze every Chess.com player due to volume; focusing on titled players keeps the data set manageable and relevant (since cheating suspicions at the high level are of particular interest).  
\- Real-time updates: Data will refresh daily, not instantly after each game. This is sufficient for catching patterns in retrospect, and it keeps infrastructure simple.  
\- Definitive cheat detection or alerts: The site does **not** make judgments or send any reports. It’s a public information tool — decisions or actions (like investigations) remain with users or chess authorities.  
\- User accounts or personalization: All content is publicly accessible; no login or user data storage is needed initially, reducing complexity.

## **4\. Data Collection and Processing**

### 4.1 Data Sources and Retrieval

All data comes from the **Chess.com Published Data API**, which is a public, read-only REST API[\[6\]](https://www.chess.com/news/view/published-data-api#:~:text=The%20PubAPI%20is%20a%20read,game%20chat%20and%20conditional%20moves). The relevant endpoints and usage patterns:

- **Titled Players List** – An endpoint provides the list of usernames for each title category (GM, IM, FM, etc.)[\[1\]](https://www.chess.com/news/view/published-data-api#:~:text=). The application will fetch all categories to compile a master list of titled players. (We will cache this list daily; changes in titled players are infrequent, so daily refresh is fine.)
- **Player Game Archives** – Chess.com provides monthly archives of a player’s games in JSON or PGN form. For each titled player, we fetch their games for the relevant month(s) covering the last 30 days. For example, if today is Aug 30, 2025, we would fetch the August 2025 archive (and late July 2025 if needed for the full 30-day window). Each archive contains an array of games with details: opponents, results, end timestamp, ratings after each game, game URL, etc. We will use the JSON for structured data.
- **Player Stats** – For each player, we may fetch their stats (rating and RD for each time control)[\[7\]](https://www.chess.com/news/view/published-data-api#:~:text=)[\[3\]](https://www.chess.com/news/view/published-data-api#:~:text=,win%20game). This is optional if the archive data already provides post-game ratings; however, the **RD (rating deviation)** from stats can help refine probability calculations. Stats are fairly small data (and cached by Chess.com) so fetching them for each player could be done if needed for accuracy.

**Rate Limiting & Etiquette:** The Chess.com API allows unlimited **serial** requests (one at a time), but discourages rapid parallel requests[\[8\]](https://support.chess.com/en/articles/9650547-published-data-api#:~:text=). To avoid being rate-limited (HTTP 429 errors), our Python data-scraping script will strictly perform one API call at a time and include a custom **User-Agent** header with contact info as recommended[\[9\]](https://support.chess.com/en/articles/9650547-published-data-api#:~:text=contact%20info%20can%20help%20resolve,Add%20something%20like). This way, we comply with Chess.com’s guidelines and reduce the risk of getting blocked for “abnormal activity”[\[10\]](https://www.chess.com/news/view/published-data-api#:~:text=Your%20serial%20access%20rate%20is,should%20never%20encounter%20rate%20limiting). The data endpoints themselves are cached on Chess.com’s side and update at most every few hours[\[11\]](https://www.chess.com/news/view/published-data-api#:~:text=), so hitting them once per day is well within acceptable use.

### 4.2 Streak Detection Algorithm

The core logic for identifying interesting streaks runs in the daily Python script:

1. **Fetch Data:** Using the titled players list, iterate over each player and retrieve their games from the last 30 days. All requests are sequential and respect API limits. We will pause appropriately between calls if needed to be polite (though one-by-one requests are effectively unlimited, a short delay can be added as a buffer). The script will likely run during off-peak hours (e.g., late night UTC) so as not to interfere with any peak usage, though this is mostly a read-only operation.
2. **Process Games:** For each player, sort their games by end_time (the API’s monthly archives are already sorted by game end time in ascending order[\[12\]](https://www.chess.com/news/view/published-data-api#:~:text=%7B%20,time%20order%20%2A%2F%20%5D)). Iterate through these games in chronological order to find **consecutive wins**:
3. Maintain a counter for the current streak length and a running product of win probabilities.
4. Every time a game result is a **win** for the player, multiply the streak’s probability by the probability of that win (computed as described in the next subsection). Increase the streak length.
5. If a game is a loss or draw, or it’s the last game in the data, the current streak ends. Record the streak if it’s at least one game (by definition it will be, since a loss/draw breaks a streak of wins). Then reset the counter and probability for the next streak (starting after the loss/draw).
6. Edge case: If the player has no wins at all or no games, they simply won’t have any streak recorded. A single win followed by a loss counts as a streak of length 1.
7. We include **all games** (all time controls) in this single chronological sequence. Streaks could span different time controls if a player switches modes and continues winning. (The probability calc will inherently account for rating differences in each game’s respective rating category, so it’s fine to mix them chronologically.)
8. **Calculate Win Probability for Each Game:** Using the ratings of the two players, we determine the expected win chance for the winner. Chess.com uses a Glicko-based rating system (with rating deviation RD), so the precise expected score formula involves both players’ ratings and RDs[\[2\]](https://en.wikipedia.org/wiki/Glicko_rating_system#:~:text=Image%3A%20,2). We will implement this formula:

$$E_A = \\frac{1}{1 + 10^{-\\frac{g(\\text{RD}\_B) \\cdot (R_A - R_B)}{400}}}$$

where $R_A$ is the rating of the player (A) and $R_B$ the opponent’s rating, and $g(RD_B)$ is a factor that reduces the impact of rating difference if the opponent’s rating has high uncertainty (RD)[\[5\]](https://www.chess.com/forum/view/general/glicko-ratings---winning-expectancy#:~:text=%283). The RD for player A could also be included by combining RDs (e.g. $RD_{combined} = \\sqrt{RD_A^2 + RD_B^2}$) as suggested by Glicko’s methods[\[4\]](https://www.chess.com/forum/view/general/glicko-ratings---winning-expectancy#:~:text=r1%20s1%20r2%20s2%20e,49). However, for simplicity and because most titled players have relatively low RDs (more stable ratings), we might approximate $g(\\phi) \\approx 1$ and use an Elo-like model for expected score.

In practice, the **post-game ratings** provided in the archive JSON for both players will serve as the ratings for this calculation[\[13\]](https://www.chess.com/news/view/published-data-api#:~:text=,of%20this%20player%27s%20profile)[\[14\]](https://www.chess.com/news/view/published-data-api#:~:text=,%2F%2F%20the%20username). For example, if a 2100-rated player beat a 2500-rated player, the Elo formula would give an expected win probability of roughly 5.5% for the 2100 player. If that happened, it’s already an “interesting” single-game streak at the 5% level (actually just above 5%, so it might not qualify unless we’re using slightly different parameters or the RD factor makes it a bit lower). We will include those borderline cases as needed by rounding or considering inclusive threshold (≤5%). For multi-game streaks, we multiply probabilities. E.g., if a player had three upset wins each with 20% chance, the streak probability is 0.2 \* 0.2 \* 0.2 = 0.8% – which would be flagged at the 1% threshold.

1. **Flag “Interesting” Streaks:** After computing the probability of each streak, compare it against the threshold levels:
2. Mark streaks ≤5% chance, ≤1%, ≤0.1%, ≤0.01% accordingly. These markers will later be used on the website (e.g., perhaps as colored badges or text labels next to the streak).
3. We store the streak details: player username, player title (for display), the player’s rating (for sorting – likely their current rating in the relevant category, e.g., their blitz rating if the streak games were blitz; if mixed or unclear, we could use their highest rating among blitz/rapid or simply their blitz rating as a representative), the streak length, the list of opponents and results, date range of the streak, and the calculated probability percentage. We also store links to the games involved (the archive data provides a URL for each game[\[15\]](https://www.chess.com/news/view/published-data-api#:~:text=match%20at%20L1568%20,1579471691), which is typically a Chess.com live game link or daily game link that can be viewed on their site).
4. **Output Data:** The script will compile all interesting streaks across all players into a data structure. This could be output as a JSON file (e.g., interesting_streaks.json) that the frontend will consume. We might also produce summary stats (like total number of interesting streaks found in each category, for use in the graphs). This JSON is essentially static for the day and will be regenerated daily.

**Volume Considerations:** There are potentially several thousand titled players, but not all will have played games in the last 30 days. Many titled players are active, however (especially online, many streamers and professionals play dozens or hundreds of games a month). We must be efficient in data retrieval. Chess.com’s archive endpoint returns all games of a player for a month in one call – which is good (we don’t hit the server per game, but per player-month). If a player is extremely active (say 1000 games in a month), the JSON might be large but still manageable. The Python script’s runtime might be on the order of tens of minutes up to a couple of hours to loop through everything sequentially. This is acceptable for a daily batch. We will ensure to log progress and handle any API errors gracefully (e.g., skip a player if data not available or retry after a pause if a request fails once, etc.).

### 4.3 Validating the Probability Model

We will test the probability calculations on known scenarios (for sanity check). For example, using known rating gaps: - If ratings are equal, each should have ~50% win probability. - A 100-point rating difference corresponds to about a 64% chance for the higher-rated (per Elo). In our model, with RDs considered, it should be similar unless one RD is huge. - Extreme upset: a 1000 rating point difference, our model should give a win probability for the lower-rated that is astronomically low (well below 0.01%). We likely won’t see such a game among titled players (they’re usually within a few hundred points of each other), but if a GM played a beginner in a casual game, theoretically it would almost always be a win for the GM.

By validating these, we ensure that our “interesting” flags truly correspond to intuitively rare events. Since RD values are available, if a high-rated player hasn’t played much (high RD) and loses a game, the model won’t overestimate the upset probability. But again, for simplicity and given our audience (who may not be deeply versed in Glicko math), we will likely present the probabilities in an easy percent form and possibly just using rating differences (noting that this is an approximation).

## **5\. Website Features and UI Design**

The **Interesting Chess** website will have a straightforward, user-friendly interface with two main pages: **(A)** the **Interesting Streaks dashboard** (table view) as the home page, and **(B)** a **Graphs & Insights page** for visualizations. Additionally, a simple header and footer will provide navigation, branding, and info.

### 5.1 Overall Look and Feel

The design will draw heavy inspiration from Chess.com’s visual style to create familiarity: - **Color Scheme:** Chess.com’s signature colors include shades of green, gray, and white. We will use a similar palette – for example, a green accent color (#34A853 or the chess-board green #769656 for highlights) combined with neutral light backgrounds (#f0f0f0 white/gray) and dark text. This mimics Chess.com’s mix of green highlights on a clean background.  
\- **Typography:** A clean, sans-serif font similar to Chess.com’s (which uses fonts like Lato or Arial on their site) will be chosen for readability. Headings may be slightly bold, and body text normal weight. We ensure the text contrast is accessible.  
\- **Layout:** A simple top navigation bar with the site logo “Interesting Chess” (perhaps accompanied by a knight icon reminiscent of Chess.com’s logo style) and menu links (e.g., “Streaks” and “Visualizations”) will be present. The layout will be responsive: on desktop, likely a wide table can be shown; on mobile, the table may scroll horizontally or stack into cards for each streak entry. Chess.com’s interfaces often use card-like panels and clear segregation of content, which we will emulate for a modern look.  
\- **Chess.com assets:** We will leverage the **player avatar images** provided by Chess.com’s API in the profile data[\[16\]](https://www.chess.com/news/view/published-data-api#:~:text=,com) – these are 200x200 pixel images for user avatars. Showing a player’s profile picture next to their name adds visual appeal and helps recognition. Also, we might use Chess.com’s provided country flag icons or country names from the player profile (optional, but Chess.com API gives a country code URL which can be converted to a flag). Title abbreviations (GM, IM, etc.) will be displayed next to names, possibly with a small icon or simply text in a pill badge.

Overall, the UI should feel like an extension of Chess.com in terms of theme, but with our specific functionality. We aim for a **lightweight** frontend: use of modern CSS for styling (could use a minimal CSS framework or TailwindCSS for rapid design, or custom CSS to match Chess.com style), and avoid heavy client-side scripts except for what’s needed (charts and ads).

### 5.2 Home Page – **Interesting Streaks Table**

This page is the heart of the site. It will display a table of all “interesting” streaks found in the latest 30-day analysis, sorted by **player rating (highest to lowest)** by default. The reasoning is that users likely want to see if any top Grandmasters or International Masters appear with unusual streaks first.

**Table Columns (and information):**  
\- **Player (Title)** – The player’s Chess.com username with their title abbreviation. This can be displayed as, for example, **GM Hikaru** or **IM johndoe**. The player’s avatar image (a small 40x40px thumbnail) will appear to the left of their name for recognition. The username will be a clickable link to their Chess.com profile (opening in a new tab).  
\- **Rating** – The player’s rating associated with the streak. If the streak involves games of a single time control, we use that rating (post-game rating of the last game in the streak, for example). If it spans multiple types, we might show the rating in the category where the streak started or simply their highest rating among common categories. This column helps to sort by rating easily. We will list the rating with the category (e.g., “2730 (Blitz)” or “1500 (Rapid)”) if applicable, so context is clear.  
\- **Streak Length** – The number of games won in a row. An integer, e.g., 1, 5, 12, etc. This immediately tells the user how long the run was. Even a “1” can appear here (highlighting a single upset win that was noteworthy).  
\- **Probability** – The combined win probability of that streak, shown as a percentage (likely with one or two decimal places for clarity on very small numbers). For example, “2.3%” or “0.05%”. This could be further clarified with a tooltip or subtext like “chance of winning all games in streak”. We might also inverse it to an odds-like statement for laymen (e.g., “1 in 2000 chance”), but for now percentage is straightforward. Very tiny probabilities (0.01% and below) will be formatted carefully, possibly in scientific notation or with a leading zero and many decimals (e.g., 0.005% can be shown as 0.005%).  
\- **“Interesting” Level** – A labeled indication of which threshold the streak crossed. This could be a colored badge: e.g., a green badge for 5% (“Rare”), an orange badge for 1% (“Very Rare”), a red badge for 0.1% (“Extremely Rare”), and perhaps a purple or gold badge for 0.01% (“Almost Impossible”). The exact labeling will be tongue-in-cheek but informative (to avoid too alarming language, sticking to “interesting” theme). Alternatively, we just display the percentile as text (like “≤1% chance”). This column helps users scan severity at a glance.

Optionally, we might include:  
\- **Games/Opponents** – not as separate columns (would clutter), but if a user clicks or expands a row, we can show a dropdown listing each game in the streak: e.g., “Jan 5: vs user123 (2450) – won”, “Jan 6: vs otherPlayer (2380) – won” etc., with each opponent name clickable to their profile, and maybe a link “View” that opens the game on Chess.com (using the game URL from the API[\[15\]](https://www.chess.com/news/view/published-data-api#:~:text=match%20at%20L1568%20,1579471691)). This on-demand expansion keeps the main table clean but gives power-users the ability to inspect the games that made up the streak. We will indicate if any wins were by resignation, timeout, etc., if that info is available (the API has a result code we can decode, e.g., "resigned", "checkmated"[\[17\]](https://www.chess.com/news/view/published-data-api#:~:text=)). This detail might be more relevant to advanced users but is nice to have.

**Sorting & Filtering:**  
\- By default sorted by Rating descending. We will also allow sorting by streak length or probability if the user clicks those headers. For example, someone might want to see the absolute longest streaks regardless of probability (though those may often have higher probability if against lower-rated opponents). Or sort by probability ascending to see the most outrageous streak overall (which might surface a modest player who had a miracle run).  
\- Filtering by title or time control could be useful (e.g., only GMs, or only blitz games), but for MVP we might skip advanced filters. If the table is too large (imagine hundreds of entries), we could add a filter search box (to find a specific player by name, for instance) easily.

**Pagination or Scroll:**  
If the number of streaks is huge, we may paginate the table. But likely, interesting streaks above the 5% cutoff will not be overwhelmingly many – it depends on how many upsets occur in a month. We can estimate: if thousands of players play many games, some 5% events will occur. It could be a few hundred entries. This is still fine to load in one go on a modern browser, but we will monitor performance. We prefer a simple single-page table (with client-side pagination if needed) to keep it static-friendly.

**Responsive Design:**  
On mobile, a wide table might not fit. We have a few options: - Use a horizontally scrollable table (with a clear indicator that it can scroll). This keeps the structure but requires user to scroll to see all columns.  
\- Or stack the information: each streak could be a card with lines like “GM Hikaru (2730 Blitz) – 5 wins – 0.5% chance – Very Rare”. This might actually be quite readable. We can hide some less crucial fields on narrow screens (e.g., maybe show just “GM Hikaru, 5 wins, 0.5% chance” and tapping it expands the details).  
We will ensure the design degrades gracefully on small screens. Given the content is mostly textual and numeric, we’ll use CSS media queries to adjust font sizes and flex directions.

### 5.3 Graphs & Visualizations Page

This page will provide a more analytical view of the data, appealing to users who like to digest information visually. It will include a few key charts/graphs, generated from the same data.

Planned visualizations:  
\- **Streaks by Rarity:** A bar chart showing how many streaks fell into each “interesting” tier (5%, 1%, 0.1%, 0.01%) in the last 30 days. For example, “20 streaks at ≤5%, 5 streaks at ≤1%, 1 streak at ≤0.1%, 0 streaks at ≤0.01%” – this gives a sense of the distribution of rare events. This could be a simple horizontal bar graph or pie chart.  
\- **Rating vs Streak Unlikelihood:** A scatter plot where each “interesting” streak is a point, with the x-axis being the player’s rating and y-axis being the streak probability (on a logarithmic scale perhaps, since probabilities span orders of magnitude). This would show if most of the flagged streaks come from lower-rated titled players (who might have more up-and-down results) or if even top GMs sometimes produce statistically odd streaks. It can also highlight outliers, e.g., a point far down (very low probability) on the right side (high rating) would indicate a very strong player had an extremely unlikely streak – a potential red flag.  
\- **Longest Streaks vs Expected**: A line or bar chart of the longest win streaks achieved by some top players vs what probability would normally suggest. For instance, we could list the top 5 longest streaks among titled players in the month and show their lengths and probabilities. Maybe an IM won 20 games straight (which might have a moderate probability if all against weaker players, or might be very low if against peers). This is more of a storytelling visualization.  
\- **Upset of the Month:** We could have a highlighted section for the single game that was the biggest rating upset (lowest win probability). This might be shown as a callout: “Player X (1800) beat Player Y (2500) in blitz – expected probability ~1.2%”. This is essentially the most interesting one-game streak. This can be accompanied by a small chart or just text with maybe an image of the final position (if we get FEN from the game – an extra fun feature could be to display the chessboard of the final position or key moment, but that might be Phase 2).

The graphs will be implemented with a lightweight charting library (e.g., Chart.js or D3). We will ensure not to bloat the page: charts could be rendered server-side as images (but that complicates a static site). Instead, we likely include a small JS bundle for this page only. Next.js can code-split so that the main page doesn’t load the charts library, only this route does when needed.

Interactivity on the charts can be minimal (e.g., hover tooltips to show exact values). If possible, we’ll allow filtering by time control or title on the scatter plot by providing checkboxes (for example, toggle to only show GMs, or only blitz games). This adds complexity, so it might be a future improvement. Initially, static charts (based on all data aggregated) are sufficient.

### 5.4 Additional Pages and Elements

- **About/Info Section:** We should have a section (could be part of the footer or a separate page link) explaining the site’s purpose, definitions of “interesting”, and disclaimers. This will clarify that “interesting” is not proof of cheating, just an indicator of statistical rarity. We will also credit Chess.com’s API and include contact info. Possibly also mention that the site is powered by AI tools (as per the prompt, though that might not be relevant to end-users).
- **Footer:** A simple footer with text like “Data from Chess.com API. Unofficial tool. Contact: \[email\]” and maybe links to our GitHub if open-sourced. Also a note on ads/cookies as needed (if using AdSense, a notice about cookies might be required).
- **Ads:** As mentioned, likely one banner ad on top of each page (typical leaderboard ad slot) and maybe one in the middle or bottom of content for the main page (depending on layout). We will ensure ads do not break the layout on mobile (responsive ad units or fixed small banners). We’ll keep them minimal to not detract from content.

## **6\. Technology Stack & Architecture**

### 6.1 Front-End and Framework

We will use **Next.js** (React framework) for building the website’s front-end and lightweight back-end. Next.js is chosen because: - It allows easy generation of a **static site** (using Static Site Generation) while also providing flexibility to have dynamic routes if needed in the future. We can generate the main pages at build time with the latest data, resulting in a purely static deployment (HTML, CSS, JS) that can be served cheaply. - Next.js supports incremental static regeneration, but in our case a full daily rebuild is fine since content changes once per day. We can also simply re-export the site whenever new data is fetched[\[18\]](https://dev.to/halchester/deploy-next-js-application-to-amazon-cloudfront-with-s3-2ibb#:~:text=%2F,). - If any API routes are needed (for example, an endpoint to fetch streak data as JSON for the charts), Next can handle that within the same project. But since we are likely to embed the data directly or as static JSON, we might not even need custom API endpoints for now.

**Front-end libraries:** We might use a CSS framework like **Tailwind CSS** to rapidly style the site in Chess.com’s style (Tailwind’s utility classes can approximate many styles without large CSS files). Alternatively, a simple custom stylesheet or styled-components can be used with global styles mimicking Chess.com. For charts, as noted, **Chart.js** or **Recharts** or **D3.js** can be used; Chart.js offers an easy way to embed charts and is fairly small for a couple of simple charts. We will ensure to load these only on the Visualizations page.

No heavy state management library is needed; React’s built-in state and simple props will suffice. The site is mostly read-only display of data.

### 6.2 Back-End Data Pipeline (Python)

The heavy lifting is done by a **Python script** (or set of scripts) for data collection and processing, separate from the Next.js app. Key aspects of this pipeline: - Written in Python (for its ease in handling HTTP requests and data parsing – plus many chess libraries exist if needed, though here we mainly need requests and basic math).  
\- Likely will use the requests library to call Chess.com API endpoints with appropriate headers (with our User-Agent as discussed).  
\- Data will be parsed (JSON responses). The script will not store sensitive information; all data is public. We might keep a cache of raw data to speed up development or in case re-processing is needed without hitting the API again (but in production, daily fresh fetch is fine due to caching on Chess.com side and low frequency).  
\- The output JSON (interesting streaks list) will be placed somewhere the Next.js app can access. There are a couple of approaches: - **Monolithic Repo**: Have the Python script as part of the project repository. On a daily schedule, run the script and commit the updated interesting_streaks.json (and any other derived assets) to the repo. Then a rebuild/deployment of the Next.js app is triggered (via CI/CD). This way, the static site is regenerated with new data. The advantage is simplicity in deployment workflow (just use Git and hosting service hooks).  
\- **Decoupled**: Host the Next.js site and the data separately. For example, the Python script could run and upload the JSON to an AWS S3 bucket. The website at runtime could fetch this JSON via an AJAX call (client-side) or via server-side rendering (Next could fetch from S3 at build time). Since we want minimal infra, an elegant way is to treat the data JSON as part of the site build (monolithic approach). Alternatively, Next’s getStaticProps can fetch from a URL (S3) during build. Either works. We prefer to avoid needing a running server to serve data – so storing it as a static file on the site itself is likely easiest.

We will implement and test the Python script locally first, ensure it produces correct outputs, then integrate it into the deployment pipeline.

### 6.3 Deployment and Hosting

The goal is to host the site in a **cost-effective** and **scalable** manner, ideally leveraging free tiers or low-cost static hosting, and ensure it can handle spikes of traffic without issue.

Our choices:  
\- **Static Hosting (AWS S3 + CloudFront CDN)**: Since the site can be a fully static bundle (HTML/JS/CSS and perhaps some JSON), we can host it on an Amazon S3 bucket configured for static website hosting and put a CloudFront CDN in front for global coverage and HTTPS. This approach means essentially zero server maintenance and extremely low cost – S3 storage of a few MB and CloudFront bandwidth (which for a small site with text data will be negligible; likely within AWS free tier limits for quite some time). CloudFront will cache content on edge locations, so users around the world get fast responses[\[19\]](https://dev.to/halchester/deploy-next-js-application-to-amazon-cloudfront-with-s3-2ibb#:~:text=So%20how%20are%20we%20going,the%20CloudFront%20do%20its%20thing). If the site suddenly gets popular, AWS static hosting can easily scale (S3/CloudFront can handle massive traffic as a CDN). We just need to upload the new site files daily after generation.  
\- **AWS Amplify or Netlify/Vercel**: AWS Amplify is a service that can connect to our repository and build/deploy the site automatically on changes. It’s basically a CI/CD + hosting solution. Amplify has a free tier for build minutes and hosting bandwidth. This could be convenient: whenever our data update script commits a change, Amplify rebuilds the Next.js app and deploys. This abstracts away the need to manually handle S3 and CloudFront (Amplify under the hood uses S3/CloudFront anyway). Netlify or Vercel are similar third-party options – Vercel is actually the company behind Next.js and offers an excellent free tier for hobby projects with seamless Next.js integration. However, since the requirement suggests using AWS if cloud services are needed, Amplify would be the analogous choice.  
\- **Domain and Routing**: We will use a custom domain, e.g., **interestingchess.com** (if available). This domain will be pointed to the hosting (Route 53 for AWS or just DNS to CloudFront/Amplify). Setting up SSL is crucial; CloudFront/Amplify handle that (free HTTPS cert). If we use just S3 static website endpoint, we’d definitely front it with CloudFront to get HTTPS.

Given our minimal backend needs, we will **not** run a persistent server or use EC2, which would be overkill. The Next.js app will be pre-rendered. We also avoid using a database – all needed data is re-derived daily and can be kept in memory or in the JSON files. Historical data (like previous days’ results) could be stored if we ever want trends over time, but that’s a future enhancement (e.g., to see if a player appears month after month).

### 6.4 Automation & Maintenance

To minimize maintainer effort, we automate the update cycle:  
\- Use a **scheduled job** to run the Python update script once per day. This could be a cron job on a small server or, better, an **AWS Lambda** function triggered by Amazon EventBridge (CloudWatch Schedule) daily. The Lambda could run the Python code (if it’s lightweight enough to execute within memory/time limits) and then, for example, push the results to an S3 bucket (if we go with S3 hosting) or commit to GitHub (somewhat complex from Lambda but possible through GitHub API). Alternatively, a simpler route is a **GitHub Actions** workflow: GitHub Actions supports cron-like schedules. We can set up an Action to run every day at a certain time, which pulls the repo, runs the Python script (the repo would contain the script), commits the updated data file, and pushes. That push triggers the Amplify/Vercel deployment. This approach keeps everything in one place (no separate server/lambda) and is free with GitHub (within reasonable usage limits).  
\- We will include contact info in the code’s User-Agent as mentioned[\[9\]](https://support.chess.com/en/articles/9650547-published-data-api#:~:text=contact%20info%20can%20help%20resolve,Add%20something%20like), so if Chess.com ever has an issue with our usage, they can reach out. This is important for maintenance; we don’t expect it, but it’s good practice.  
\- Logging: The script should log summary stats (# of games processed, # of streaks found, time taken, etc.). If run via Actions or Lambda, we can review logs for any errors. If the script fails one day (maybe due to an API hiccup), the previous day’s data will remain on the site (stale by one day, which is not catastrophic). The system should alert the maintainer if a run fails (e.g., via email from the GitHub Action or CloudWatch alarm) so they can intervene.  
\- **Scalability of the data job:** If the number of players grows or we decide to include more data, we might consider parallelizing the data fetch. However, due to the API’s strict **serial requirement** to avoid rate limit[\[10\]](https://www.chess.com/news/view/published-data-api#:~:text=Your%20serial%20access%20rate%20is,should%20never%20encounter%20rate%20limiting), we cannot massively parallelize. But we could split work by category (e.g., fetch GMs then IMs sequentially each, maybe slight parallel between categories if absolutely needed, but likely not). The single-threaded approach might be fine even for a few thousand players. If needed, multiple IPs or staggering over time could be used, but currently not necessary.  
\- **Maintenance Effort:** Aside from monitoring the daily job, the maintainer might need to update the code if Chess.com changes their API (unlikely in the short term, but possible if new game types are added or JSON format changes). We’ll keep the code well-documented. The front-end is static and shouldn’t require constant updates. Content maintenance (like adjusting thresholds or adding clarifications) can be done via simple text edits and redeploys.

### 6.5 Security and Privacy

Security considerations are fairly limited as this is a static informational site: - We are not handling user accounts or logins, so no authentication to implement.  
\- We will ensure the site is served over HTTPS (especially since we load external resources like ads scripts – they should be over https as well).  
\- The data we display is public info from Chess.com; we will attribute Chess.com appropriately. We must also ensure not to violate any terms – Chess.com’s API terms require attribution and no abuse. We’re including contact info as mentioned and using data in a read-only, fair use manner (no personal data beyond what’s public).  
\- One possible consideration: If a player is flagged as “interesting” repeatedly, it could affect their reputation. We will include a disclaimer that these stats are not proof of any wrongdoing, merely data. This is more of an ethical consideration, but important. The wording on the site should be careful not to libel; likely by sticking to factual language (“X had a streak with Y% probability”) we are safe.  
\- We’ll also provide a way for a player to contact us if they have concerns (e.g., if someone feels they are misrepresented, though we’re just using factual data, but as a courtesy).

## **7\. Deployment Strategy and Cost Efficiency**

A primary requirement is that the website should be **cheap (or free) to maintain and easily scalable**. Here’s the plan to achieve that:

- **Static Site, CDN-Cached:** By deploying the site as a static bundle, we remove the need for running web servers 24/7. Services like AWS S3 + CloudFront incur negligible costs for low traffic (AWS free tier covers a generous amount of S3 storage and CloudFront egress). Even beyond free tier, serving primarily text/JSON and some images (avatars) is very low bandwidth. CloudFront will cache content globally, so even if we get spikes of traffic (say a big Reddit thread links to us), AWS edges handle it without extra work or cost spikes (CDN pricing is linear and cheap per GB). We won’t need auto-scaling instances or load balancers. In short, **scaling is automatically handled by using static hosting**[\[19\]](https://dev.to/halchester/deploy-next-js-application-to-amazon-cloudfront-with-s3-2ibb#:~:text=So%20how%20are%20we%20going,the%20CloudFront%20do%20its%20thing).
- **AWS Free Tier Utilization:** The site likely qualifies for free tier: S3 offers 5GB storage free (our site will be maybe a few MB), and CloudFront offers 50GB data transfer out free monthly for the first year, which is a lot for a mostly text site. Even after that, the cost per GB is low (a few cents). If we had millions of users it might add up, but then presumably ad revenue would offset it. We can also set aggressive cache headers since data only changes daily, enabling CloudFront to serve mostly from cache.
- **Minimal Compute Cost:** The Python daily job could run on GitHub’s free CI minutes or AWS Lambda. GitHub Actions gives some free minutes per month which should suffice (a daily job that runs for, say, 30 minutes is ~900 minutes a month, within limits if our account has the standard open-source allowance). AWS Lambda can also run for free up to a certain number of requests and time – if we keep the memory low, a once-daily run is negligible. So both can effectively be free.
- **Monitoring Costs:** We will use free options for monitoring (GitHub Action notifications, or simple CloudWatch logs if on Lambda). No need for paid monitoring.
- **Next.js on Vercel (alternative):** For completeness, using Vercel hosting could also be free for this scale. Vercel handles CDN and builds nicely. However, since the instruction is to use AWS if needed, we’ll stick to AWS offerings. But it’s good to note that we have multiple zero-cost hosting options.

**Deployment Workflow:**  
1\. Developer pushes any code changes to main branch (or automation pushes data changes).  
2\. AWS Amplify (or a CI/CD pipeline) detects the change, runs npm install && npm run build for Next.js, exporting the static site. It then deploys to CloudFront. This can be scheduled daily via the data push.  
\- If using GitHub Action for data: The action will commit data, then we rely on Amplify’s webhook to deploy.  
\- If using Lambda for data: The Lambda after updating S3 could also invalidate CloudFront cache or trigger Amplify build via an API call if needed. Alternatively, we could directly generate the HTML pages in the Lambda (running next build && next export programmatically), but that’s complex. A simpler decoupling: have the Next site fetch the JSON from S3 on the client side. That way we can update JSON on S3 (which CloudFront will serve fresh) without redeploying the site code. This would make the maintenance even simpler (site code changes only when we change features, not daily). In this model, the Next site is static and fetches a latest.json from S3 every time the page loads (which is essentially daily cached by CloudFront). This is a viable approach: it reduces the redeploy frequency to when code changes, not data changes. We just need to ensure the client fetch doesn’t slow down the page noticeably. We can mitigate by having the JSON loaded via a &lt;script&gt; tag or similar.  
3\. The site is live and up-to-date with minimal human input. We will test the deploy pipeline thoroughly to avoid hiccups.

## **8\. Future Enhancements (Post-MVP considerations)**

While the PRD covers the current design, a few ideas could be explored later: - **Player Detail Pages:** Click on a player in the table to see a dedicated page with their performance overview, including all their interesting streaks over time, maybe a graph of their rating vs time, and all games from the streak with moves (embedding a chessboard viewer for each game). This would deepen the content but also increase data to pre-fetch.  
\- **Expanding to non-titled players or specific rating ranges:** If the site gains traction, we might allow analysis of other sets of players (like top 1000 players by rating or specific club players). But this would exponentially increase data volume and is likely out of scope because of rate limits and practicality. Titled players are a neat contained group.  
\- **Real-time alerts or subscriptions:** For example, a feature to subscribe to notifications if a new extremely unlikely streak appears. This would require storing user info and sending emails/notifications, which adds complexity and cost. Not planned for now.  
\- **Better cheat-related analytics:** Possibly correlating with known fair-play actions (if Chess.com publishes closure of accounts for cheating, one could see if those accounts had flagged streaks beforehand – could be a retrospective study displayed on the site). This would be interesting but needs data that might not be publicly available readily.  
\- **Community features:** e.g., allow comments or discussion on a particular streak. This likely would require a login system or leveraging a third-party widget – probably not worth the moderation effort.

Our focus is to get the **core functionality** right: accurate data, clear presentation, and robust, low-cost operation.

## **9\. Conclusion**

**Interesting Chess** is designed to be a practically maintenance-free, data-driven website that shines a light on unusual chess results in the online world. By leveraging Chess.com’s public API and carefully computing win probabilities using well-founded rating formulas, the site can surface **truly rare streaks** that warrant a second look – all presented in a familiar Chess.com-like interface. The product prioritizes simplicity: daily refreshed static content, a clean table for information, and minimal clicks to get what you need.

In summary, the application will meet the requirements by:  
\- **Implementing the streak detection and probability logic** to identify “interesting” events (cheating implications left to user interpretation).  
\- **Presenting the data in a visually clear and attractive way** that aligns with chess community norms (using Chess.com styling cues, tables, graphs).  
\- **Using Next.js and Python** to ensure a smooth development process and efficient site generation.  
\- **Deploying on scalable, low-cost infrastructure** (static hosting on AWS) to handle traffic without significant expenses, keeping the project sustainable with ad monetization.

With this design, **Interesting Chess** will be a valuable and easily accessible resource for the chess community, sparking conversations and investigations around those eyebrow-raising performances that occasionally happen in the 64-square arena. By maintaining a lightweight and automated approach, the site can run continuously with minimal oversight, achieving the goal of a free, scalable service that feels like a natural extension of the Chess.com ecosystem.

**Sources:** Chess.com Published Data API documentation (for data endpoints and usage guidelines)[\[1\]](https://www.chess.com/news/view/published-data-api#:~:text=)[\[8\]](https://support.chess.com/en/articles/9650547-published-data-api#:~:text=), Glicko rating system explanation (for win probability calculations)[\[2\]](https://en.wikipedia.org/wiki/Glicko_rating_system#:~:text=Image%3A%20,2), and deployment best practices for Next.js on AWS (for cost-efficient, scalable hosting)[\[19\]](https://dev.to/halchester/deploy-next-js-application-to-amazon-cloudfront-with-s3-2ibb#:~:text=So%20how%20are%20we%20going,the%20CloudFront%20do%20its%20thing).

[\[1\]](https://www.chess.com/news/view/published-data-api#:~:text=) [\[3\]](https://www.chess.com/news/view/published-data-api#:~:text=,win%20game) [\[6\]](https://www.chess.com/news/view/published-data-api#:~:text=The%20PubAPI%20is%20a%20read,game%20chat%20and%20conditional%20moves) [\[7\]](https://www.chess.com/news/view/published-data-api#:~:text=) [\[10\]](https://www.chess.com/news/view/published-data-api#:~:text=Your%20serial%20access%20rate%20is,should%20never%20encounter%20rate%20limiting) [\[11\]](https://www.chess.com/news/view/published-data-api#:~:text=) [\[12\]](https://www.chess.com/news/view/published-data-api#:~:text=%7B%20,time%20order%20%2A%2F%20%5D) [\[13\]](https://www.chess.com/news/view/published-data-api#:~:text=,of%20this%20player%27s%20profile) [\[14\]](https://www.chess.com/news/view/published-data-api#:~:text=,%2F%2F%20the%20username) [\[15\]](https://www.chess.com/news/view/published-data-api#:~:text=match%20at%20L1568%20,1579471691) [\[16\]](https://www.chess.com/news/view/published-data-api#:~:text=,com) [\[17\]](https://www.chess.com/news/view/published-data-api#:~:text=) Published-Data API - Chess.com

<https://www.chess.com/news/view/published-data-api>

[\[2\]](https://en.wikipedia.org/wiki/Glicko_rating_system#:~:text=Image%3A%20,2) Glicko rating system - Wikipedia

<https://en.wikipedia.org/wiki/Glicko_rating_system>

[\[4\]](https://www.chess.com/forum/view/general/glicko-ratings---winning-expectancy#:~:text=r1%20s1%20r2%20s2%20e,49) [\[5\]](https://www.chess.com/forum/view/general/glicko-ratings---winning-expectancy#:~:text=%283) Glicko Ratings - Winning Expectancy (Rating/Maths/Stats geeks - please help!) - Chess Forums - Chess.com

<https://www.chess.com/forum/view/general/glicko-ratings---winning-expectancy>

[\[8\]](https://support.chess.com/en/articles/9650547-published-data-api#:~:text=) [\[9\]](https://support.chess.com/en/articles/9650547-published-data-api#:~:text=contact%20info%20can%20help%20resolve,Add%20something%20like) Published-Data API | Chess.com Help Center

<https://support.chess.com/en/articles/9650547-published-data-api>

[\[18\]](https://dev.to/halchester/deploy-next-js-application-to-amazon-cloudfront-with-s3-2ibb#:~:text=%2F,) [\[19\]](https://dev.to/halchester/deploy-next-js-application-to-amazon-cloudfront-with-s3-2ibb#:~:text=So%20how%20are%20we%20going,the%20CloudFront%20do%20its%20thing) Deploy Next JS Application to Amazon CloudFront with S3 - DEV Community

<https://dev.to/halchester/deploy-next-js-application-to-amazon-cloudfront-with-s3-2ibb>